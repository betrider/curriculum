dependencies:
1.go_router(라우팅)
2.flutter_riverpod, equatable(상태관리)
3.retrofit,dio,logger,json_annotation(api 통신)

4.package_info_plus(패키지 정보)
5.device_info_plus(디바이스 정보)
6.shared_preferences(내부 스토리지)
7.flutter_secure_storage(암호화 내부 스토리지)
8.url_launcher(인터넷,전화번호,이메일 연결)
9.connectivity_plus(네트워크 감지)
10.upgrader(앱 버전관리)

11.firebase_core(코어)
12.firebase_analytics
13.firebase_crashlytics
14.firebase_messaging
15.flutter_local_notifications

16.flutter_app_badger(아이콘 배지)
17.flutter_launcher_icons(아이콘 빌더)
18.flutter_native_splash(스플래시 빌더)

19.intl
20.flutter_localizations(flutter)

+
webview_flutter(웹뷰)
flutter_svg(svg사용시 필요)
easy_localization(다국어)
cached_network_image(캐시 네트워크 이미지)

dev_dependencies:
1.retrofit_generator
2.build_runner
3.json_serializable
4.riverpod_lint(dart run custom_lint)
5.mockito

-----------------------------------------
import 'package:flutter/material.dart';
import 'package:flutter_application_9/1_presentation/login_page/login_page_view_model.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class LoginPage extends ConsumerWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    int count = ref.watch(loginProvider).count; // 상태를 감지
    return Scaffold(
      appBar: AppBar(title: const Text('Login Page')),
      body: Center(child: Text('count:$count')),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // 업데이트 호출
          ref.read(loginProvider.notifier).updateCount();
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

--

import 'package:equatable/equatable.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// 호출부
final loginProvider = NotifierProvider<LoginNotifier, LoginState>(LoginNotifier.new);

// 정의부(알림)
class LoginNotifier extends Notifier<LoginState> {
  @override
  LoginState build() {
    return const LoginState();
  }

  // 카운트 업데이트
  void updateCount(){
    state = state.copyWith(count: state.count + 1);
  }
}

// 정의부(상태)
class LoginState extends Equatable {
  final int count;
  const LoginState({
    this.count = 0,
  });

  LoginState copyWith({
    int? count,
  }) {
    return LoginState(
      count: count ?? this.count,
    );
  }

  @override
  List<Object> get props => [count];
}

--
class MyConstants {
  MyConstants._();

  static const String baseUrl1 = 'https://www.naver.com';
  static const String baseUrl2 = 'https://www.naver.com';
  static const String baseUrl3 = 'https://www.naver.com';
  static const String baseUrl4 = 'https://www.naver.com';
}

--

import 'package:flutter/material.dart';
import 'package:flutter_application_9/1_presentation/login_page/login_page_view.dart';
import 'package:go_router/go_router.dart';

final GoRouter router = GoRouter(
  routes: <RouteBase>[
    GoRoute(
      path: '/',
      builder: (BuildContext context, GoRouterState state) {
        return const LoginPage();
      },
      // routes: <RouteBase>[
      //   GoRoute(
      //     path: 'details',
      //     builder: (BuildContext context, GoRouterState state) {
      //       return const DetailsScreen();
      //     },
      //   ),
      // ],
    ),
  ],
);

---------------------------------------------------------------------------------

예 : DateFormat('yyyy.MM.dd (E)').format(DateTime.now());

intl: ^0.18.1
flutter_localizations:
  sdk: flutter

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_application_9/route.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // 세로모드 고정
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  Intl.defaultLocale = 'ko_KR';
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      routerConfig: router,
      localizationsDelegates: const [
        //다국어 지원
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('ko', 'KR'),
      ],
      title: 'Flutter Demo',
    );
  }
}


