dependencies:
1.go_router(라우팅)
2.flutter_riverpod, equatable(상태관리)
3.retrofit,dio,logger,json_annotation(api 통신)

4.package_info_plus(패키지 정보)
5.device_info_plus(디바이스 정보)
6.shared_preferences(내부 스토리지)
7.flutter_secure_storage(암호화 내부 스토리지)
8.url_launcher(인터넷,전화번호,이메일 연결)
9.connectivity_plus(네트워크 감지)
10.upgrader(앱 버전관리)

11.firebase_core(코어)
12.firebase_analytics
13.firebase_crashlytics
14.firebase_messaging
15.flutter_local_notifications

16.flutter_app_badger(아이콘 배지)
17.flutter_launcher_icons(아이콘 빌더)
18.flutter_native_splash(스플래시 빌더)

19.intl
20.flutter_localizations(flutter)

+
webview_flutter(웹뷰)
flutter_svg(svg사용시 필요)
easy_localization(다국어)
cached_network_image(캐시 네트워크 이미지)

dev_dependencies:
1.retrofit_generator
2.build_runner
3.json_serializable
4.riverpod_lint(dart run custom_lint)
5.mockito

-----------------------------------------
import 'package:flutter/material.dart';
import 'package:flutter_application_9/1_presentation/login_page/login_page_view_model.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class LoginPage extends ConsumerWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    int count = ref.watch(loginProvider).count; // 상태를 감지
    return Scaffold(
      appBar: AppBar(title: const Text('Login Page')),
      body: Center(child: Text('count:$count')),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // 업데이트 호출
          ref.read(loginProvider.notifier).updateCount();
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

--

import 'package:equatable/equatable.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// 호출부
final loginProvider = NotifierProvider<LoginNotifier, LoginState>(LoginNotifier.new);

// 정의부(알림)
class LoginNotifier extends Notifier<LoginState> {
  @override
  LoginState build() {
    return const LoginState();
  }

  // 카운트 업데이트
  void updateCount(){
    state = state.copyWith(count: state.count + 1);
  }
}

// 정의부(상태)
class LoginState extends Equatable {
  final int count;
  const LoginState({
    this.count = 0,
  });

  LoginState copyWith({
    int? count,
  }) {
    return LoginState(
      count: count ?? this.count,
    );
  }

  @override
  List<Object> get props => [count];
}

--
class MyConstants {
  MyConstants._();

  static const String baseUrl1 = 'https://www.naver.com';
  static const String baseUrl2 = 'https://www.naver.com';
  static const String baseUrl3 = 'https://www.naver.com';
  static const String baseUrl4 = 'https://www.naver.com';
}

--

import 'package:flutter/material.dart';
import 'package:flutter_application_9/1_presentation/login_page/login_page_view.dart';
import 'package:go_router/go_router.dart';

final GoRouter router = GoRouter(
  routes: <RouteBase>[
    GoRoute(
      path: '/',
      builder: (BuildContext context, GoRouterState state) {
        return const LoginPage();
      },
      // routes: <RouteBase>[
      //   GoRoute(
      //     path: 'details',
      //     builder: (BuildContext context, GoRouterState state) {
      //       return const DetailsScreen();
      //     },
      //   ),
      // ],
    ),
  ],
);

---------------------------------------------------------------------------------

예 : DateFormat('yyyy.MM.dd (E)').format(DateTime.now());

intl: ^0.18.1
flutter_localizations:
  sdk: flutter

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_application_9/route.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // 세로모드 고정
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  Intl.defaultLocale = 'ko_KR';
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      routerConfig: router,
      localizationsDelegates: const [
        //다국어 지원
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('ko', 'KR'),
      ],
      title: 'Flutter Demo',
    );
  }
}

--

예)void login() async{
    // repository - login호출
    var result = await ref.read(authRepositoryProvider).login();
  }

import 'package:flutter_riverpod/flutter_riverpod.dart';

final authRepositoryProvider = Provider<AuthRepository>((ref) => AuthRepository());

class AuthRepository {
  Future<String> login() async {
    // 실제 API 요청을 가정한 2초 딜레이
    await Future.delayed(const Duration(seconds: 2));
    return "Hello from API";
  }
}


--

-shared_preferences.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// 내부 스토리지
final sharedPreferencesProvider = Provider<SharedPreferences>(
  (ref) => throw UnimplementedError(),
);

-main.dart
var prefs = await SharedPreferences.getInstance();
  runApp(
    ProviderScope(
      overrides: [
        sharedPreferencesProvider.overrideWithValue(prefs)
      ],
      child: MyApp(),
    ),
  );

---

import 'package:dio/dio.dart';
import 'package:flutter_application_9/2_data/data_source/remote/response/auth_response.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';
import 'package:retrofit/retrofit.dart';

part 'rest_api.g.dart';

final restProvider = Provider<RestClient>((ref) {
  // dio 생성
  final dio = Dio();

  // token interceptor 추가
  dio.interceptors.add(
    QueuedInterceptorsWrapper(
      // 요청
      onRequest: (options, handler) {
        // Add the access token to the request header
        options.headers['Authorization'] = 'Bearer your_access_token';
        return handler.next(options);
      },
      // 성공
      onResponse: (response, handler) {
        return handler.next(response);
      },
      // 실패
      onError: (DioException e, handler) async {
        if (e.response?.statusCode == 401) {
          // If a 401 response is received, refresh the access token
          String newAccessToken = await refreshToken();

          // Update the request header with the new access token
          e.requestOptions.headers['Authorization'] = 'Bearer $newAccessToken';

          // Repeat the request with the updated header
          return handler.resolve(await dio.fetch(e.requestOptions));
        }
        return handler.next(e);
      },
    ),
  );

  // log interceptor
  dio.interceptors.add(PrettyDioLogger());

  final client = RestClient(dio);

  return client;
});

Future<String> refreshToken() async {
  // Perform a request to the refresh token endpoint and return the new access token.
  // You can replace this with your own implementation.
  return 'your_new_access_token';
}

@RestApi(baseUrl: 'https://jsonplaceholder.typicode.com')
abstract class RestClient {
  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;

  @POST('/login')
  Future<AuthResponse> login();

  // @POST('/refresh')
  // Future<RefreshTokenResponse> refreshToken(@Body() RefreshTokenRequest request);

  // @GET('/posts')
  // Future<List<PostResponse>> getPosts1();

  // @GET('/posts/{postId}')
  // Future<PostResponse> getPosts2(@Path("postId") String postId);

  // @GET('/posts/{postId}/comments')
  // Future<List<CommentResponse>> getComments1(@Path("postId") String postId);

  // @GET('/comments')
  // Future<List<CommentResponse>> getComments2(@Queries() CommentRequest request);

  // @POST('/posts')
  // Future<dynamic> postPosts();

  // @PUT('/posts/{postId}')
  // Future<dynamic> putPosts(@Path("postId") String postId);

  // @PATCH('/posts/{postId}')
  // Future<dynamic> patchPosts(@Path("postId") String postId);

  // @DELETE('/posts/{postId}')
  // Future<dynamic> deletePosts(@Path("postId") String postId);

  // @POST("/tasks/{cc}")
  // Future<dynamic> testMethod(
  //   @Queries() Map<String, dynamic> aa, // queryParameters 형식에 추가(addAll)
  //   @Query('apikey') String bb, // queryParameters 형식에 추가
  //   @Path('cc') String cc, // path 파라미터용(link)
  //   @Body() RefreshTokenRequest dd, // class 형식으로 추가(1)
  //   @Field() String ff, // Map 형식으로 추가(2)
  //   @Part() String ee, // FormData 형식으로 추가(3)
  // );
}

--

import 'package:flutter/material.dart';

ThemeData customThemeData() {
  return ThemeData(
    inputDecorationTheme: InputDecorationTheme(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10.0),
      ),
    ),
  );
}

--

// 샘플데이터 주입
// restProvider.overrideWithValue(SampleRestClient()),

class SampleRestClient implements RestClient{
  @override
  Future<AuthResponse> login() async{
    return AuthResponse();
  }
}

--

RegExp emailRegex = RegExp(r'^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$');
RegExp phoneRegExp = RegExp(r'^01[0-9]-\d{3,4}-\d{4}$');

void main(){
  String aa = '01052223333';
  print(aa.isPhonNumber);
}

extension StringExtension on String? {
  bool get isEmail{
    if (this == null) {
      return false;
    } else {
      return emailRegex.hasMatch(this!);
    }
  }
  bool get isPhonNumber{
    if (this == null) {
      return false;
    } else {
      return phoneRegExp.hasMatch(this!);
    }
  }
}

-- 폴더구조
1.presentation
	1-1.loginPage
		1-1-1.login_page.dart
		1-1-2.login_page_vm.dart
2.data
	2-1.data_source
		2-1-1.local(스토리지)
		2-1-2.remote(api)
			1)request
			2)response
			3)rest_api.dart
	
	2-2.repository
ui - widget component(재사용 위젯),color, font ..
utils - extension,regexp ..
constants - baseUrl, link ..
route - 페이지 라우트 정의
